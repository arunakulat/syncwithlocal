backend default {
 .host = "127.0.0.1";
 .port = "8080";
 .connect_timeout = 600s;
 .first_byte_timeout = 600s;
 .between_bytes_timeout = 600s;
}

sub vcl_recv {
# remove req.http.X-Forwarded-For;
# set req.http.X-Forwarded-For = client.ip;

sub vcl_recv {
 if (req.request != "GET" &&
 req.request != "HEAD" &&
 req.request != "PUT" &&
 req.request != "POST" &&
 req.request != "TRACE" &&
 req.request != "OPTIONS" &&
 req.request != "DELETE") {
 /* Non-RFC2616 or CONNECT which is weird. */
 return (pipe);
 }

if (req.request != "GET" && req.request != "HEAD") {
 /* We only deal with GET and HEAD by default */
 return (pass);
 }

 // from https://wiki.fourkitchens.com/display/PF/Configure+Varnish+for+Pressflow?focusedCommentId=13828160
 // Remove has_js, Google Analytics __* and Drupal.toolbar.collapsed cookies.

 set req.http.Cookie = regsuball(req.http.Cookie, "(^|;\s*)(__[a-z]+|has_js|Drupal.toolbar.collapsed)=[^;]*", "");

 // Remove a ";" prefix, if present.

 set req.http.Cookie = regsub(req.http.Cookie, "^;\s*", "");

 // Remove empty cookies.

 if (req.http.Cookie ~ "^\s*$") {
 unset req.http.Cookie;
 }

if (req.http.Authorization || req.http.Cookie) {
 /* Not cacheable by default */
 return (pass);
 }

// Skip the Varnish cache for install, update, and cron
 if (req.url ~ "install\.php|update\.php|cron\.php") {
 return (pass);
 }
 // fix compression per http://www.varnish-cache.org/trac/wiki/FAQ/Compression
 if (req.http.Accept-Encoding) {
 if (req.url ~ "\.(jpg|png|gif|gz|tgz|bz2|tbz|mp3|ogg)$") {
 # No point in compressing these
 remove req.http.Accept-Encoding;
 } elsif (req.http.Accept-Encoding ~ "gzip") {
 set req.http.Accept-Encoding = "gzip";
 } elsif (req.http.Accept-Encoding ~ "deflate" && req.http.user-agent !~ "MSIE") {
 set req.http.Accept-Encoding = "deflate";
 } else {
 # unkown algorithm
 remove req.http.Accept-Encoding;
 }
 }

}
// Let's have a little grace
 set req.grace = 30s;
 
 return (lookup);
}
 
sub vcl_hash {
 if (req.http.Cookie) {
 hash_data (req.http.Cookie);
 }
}

// one version of vcl_hash
# sub vcl_hash {
# if (req.http.Cookie) {
# vcl_hash(req.http.Cookie);
# return (hash);
# }
# }

// Another version
#sub vcl_hash {
# if (req.http.Cookie) {
# set req.hash += req.http.Cookie;
 # }
#}


// Strip any cookies before an image/js/css is inserted into cache.

sub vcl_fetch {

if (req.url ~ "\.(jpg|jpeg|png|gif|gz|tgz|bz2|tbz|mp3|ogg|swf)$") 
	{
	// For Varnish 2.0 or earlier, 
	//unset obj.http.set-cookie;
	unset beresp.http.set-cookie;
  	}
}
 
// Set a header to track a cache HIT/MISS.
sub vcl_deliver {
  if (obj.hits > 0) {
    set resp.http.X-Varnish-Cache = "HIT";
  }
  else {
    set resp.http.X-Varnish-Cache = "MISS";
  }
}
 
sub vcl_error {
  // Let's deliver a friendlier error page.
  // You can customize this as you wish.
  set obj.http.Content-Type = "text/html; charset=utf-8";
  synthetic {"
  <?xml version="1.0" encoding="utf-8"?>
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
  <html>
    <head>
      <title>"} + obj.status + " " + obj.response + {"</title>
      <style type="text/css">
      #page {width: 400px; padding: 10px; margin: 20px auto; border: 1px solid black; background-color: #FFF;}
      p {margin-left:20px;}
      body {background-color: #DDD; margin: auto;}
      </style>
    </head>
    <body>
    <div id="page">
    <h1>Page Could Not Be Loaded</h1>
    <p>We're very sorry, but the page could not be loaded properly. This should be fixed very soon, and we apologize for any inconvenience.</p>
    <hr />
    <h4>Debug Info:</h4>
    <pre>Status: "} + obj.status + {"
Response: "} + obj.response + {"
XID: "} + req.xid + {"</pre>
      </div>
    </body>
   </html>
  "};
  return(deliver);
}
# This is a basic VCL configuration file for varnish. See the vcl(7)
# man page for details on VCL syntax and semantics.
# 
# Default backend definition. Set this to point to your content
# server.
# 
#backend default {
# .host = "127.0.0.1";
# .port = "8080";
#}
# 
# Below is a commented-out copy of the default VCL logic. If you
# redefine any of these subroutines, the built-in logic will be
# appended to your code.
# 
# sub vcl_recv {
# if (req.restarts == 0) {
# 	if (req.http.x-forwarded-for) {
# 	 set req.http.X-Forwarded-For =
# 		req.http.X-Forwarded-For ", " client.ip;
# 	} else {
# 	 set req.http.X-Forwarded-For = client.ip;
# 	}
# }
# if (req.request != "GET" &&
# req.request != "HEAD" &&
# req.request != "PUT" &&
# req.request != "POST" &&
# req.request != "TRACE" &&
# req.request != "OPTIONS" &&
# req.request != "DELETE") {
# /* Non-RFC2616 or CONNECT which is weird. */
# return (pipe);
# }
# if (req.request != "GET" && req.request != "HEAD") {
# /* We only deal with GET and HEAD by default */
# return (pass);
# }
# if (req.http.Authorization || req.http.Cookie) {
# /* Not cacheable by default */
# return (pass);
# }
# return (lookup);
# }
# 
# sub vcl_pipe {
# # Note that only the first request to the backend will have
# # X-Forwarded-For set. If you use X-Forwarded-For and want to
# # have it set for all requests, make sure to have:
# # set bereq.http.connection = "close";
# # here. It is not set by default as it might break some broken web
# # applications, like IIS with NTLM authentication.
# return (pipe);
# }
# 
# sub vcl_pass {
# return (pass);
# }
# 
# sub vcl_hash {
# set req.hash += req.url;
# if (req.http.host) {
# set req.hash += req.http.host;
# } else {
# set req.hash += server.ip;
# }
# return (hash);
# }
# 
# sub vcl_hit {
# if (!obj.cacheable) {
# return (pass);
# }
# return (deliver);
# }
# 
# sub vcl_miss {
# return (fetch);
# }
# 
# sub vcl_fetch {
# if (!beresp.cacheable) {
# return (pass);
# }
# if (beresp.http.Set-Cookie) {
# return (pass);
# }
# return (deliver);
# }
# 
# sub vcl_deliver {
# return (deliver);
# }
# 
# sub vcl_error {
# set obj.http.Content-Type = "text/html; charset=utf-8";
# synthetic {"
# <?xml version="1.0" encoding="utf-8"?>
# <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
# "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
# <html>
# <head>
# <title>"} obj.status " " obj.response {"</title>
# </head>
# <body>
# <h1>Error "} obj.status " " obj.response {"</h1>
# <p>"} obj.response {"</p>
# <h3>Guru Meditation:</h3>
# <p>XID: "} req.xid {"</p>
# <hr>
# <p>Varnish cache server</p>
# </body>
# </html>
# "};
# return (deliver);
# }